#!/usr/bin/env python3

from bs4 import BeautifulSoup
import json

RESULTS = []

for n in range(1, 80):
    if (n == 61): continue
    if (n == 65): continue
    if (n == 67): continue
    if (n == 68): continue
    if (n == 70): continue
    if (n == 74): continue
    if (n == 78): continue
    with open(f'./results/testing-{n}.html', 'r') as f:
        soup = BeautifulSoup(f.read(), 'html.parser')
        picture_hero_1 = soup.find_all("img", class_="hero-image1")[0]['src']
        picture_hero_2 = soup.find_all("img", class_="hero-image2")[0]['src']
        picture_hero_3 = soup.find_all("img", class_="hero-image3")[0]['src']

        title = soup.find_all("label", class_="is-big")[0].string

        name = soup.find_all("div", class_="c-tycoon-info__row")[1].label.string

        quality = soup.find_all("span", class_="c-tycoon-info__name")[0].contents[0]

        cost = soup.find_all("div", class_="c-tycoon-info__text")[1].contents[0]

        skill_name = soup.find_all("label", class_="c-tycoon-detail__label")[0].string.split(": ")[1]

        skill_description_1 = soup.find_all("div", class_="b-grid__row skill-text skill_text1")[0].get_text().split('\n')
        skill_description_1 = [n.strip() for n in skill_description_1]
        skill_description_1 = ' '.join([n for n in skill_description_1 if n != ''])

        skill_description_2 = soup.find_all("div", class_="b-grid__row skill-text skill_text2 d-none")[0].get_text().split('\n')
        skill_description_2 = [n.strip() for n in skill_description_2]
        skill_description_2 = ' '.join([n for n in skill_description_2 if n != ''])

        skill_description_3 = soup.find_all("div", class_="b-grid__row skill-text skill_text3 d-none")[0].get_text().split('\n')
        skill_description_3 = [n.strip() for n in skill_description_3]
        skill_description_3 = ' '.join([n for n in skill_description_3 if n != ''])

        skill_picture = None
        try:
            skill_picture = soup.find_all("div", class_="b-grid__img")[0].contents[1].contents[1]['src']
        except IndexError:
            skill_picture = soup.findAll("div", class_="b-grid__img")[0].contents[0].contents[0]['src']

        temp = soup.find_all("div", class_="c-group-index__text")

        stats = None
        if n == 1:
            stats = [n.contents[1].string for n in temp]
        else:
            stats = [n.contents[0].string for n in temp]

        hp = [int(stats[0]), int(stats[6]), int(stats[12])]
        atk = [int(stats[1]), int(stats[7]), int(stats[13])]
        armor = [int(stats[2]), int(stats[8]), int(stats[14])]
        atk_rate = [float(stats[3]), float(stats[9]), float(stats[15])]
        magic_resistance = None
        if stats[4] != None:
            magic_resistance = [int(stats[4]), int(stats[10]), int(stats[16])]
        else:
            magic_resistance = [0, 0, 0]
        atk_range = [int(stats[5]), int(stats[11]), int(stats[17])]

        races = soup.find_all("div", class_="c-tycoon-index__row")[0].contents
        races = [n for n in races if n != '\n'][1:]

        if len(races) == 1:
            races = [races[0].contents[1].string]
        else:
            races = [races[0].contents[1].string, races[1].contents[1].string]

        classes = soup.find_all("div", class_="c-tycoon-index__row")[1].contents
        classes = [n for n in classes if n != '\n'][1].contents
        classes = [n for n in classes if n != '\n'][0].string
        
        RESULTS.append({
            "id": n,
            "title": title,
            "name": name,
            "quality": quality,
            "cost": int(cost),
            "races": races,
            "class": classes,
            "stats": {
                "hp": hp,
                "armor": armor,
                "magicResistance": magic_resistance,
                "atk": atk,
                "atkRate": atk_rate,
                "atkRange": atk_range
                },
            "ability": {
                "name": skill_name,
                "picture": skill_picture,
                "descriptions": [
                    skill_description_1,
                    skill_description_2,
                    skill_description_3
                    ]
                },
            "pictures": [
                picture_hero_1,
                picture_hero_2,
                picture_hero_3,
                ]
            })


with open("./heroes.json", "w") as f:
    f.write(json.dumps(RESULTS, indent=4))
